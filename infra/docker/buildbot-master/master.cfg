# ex: set filetype=python:

from buildbot.plugins import worker, changes, util, steps, schedulers, \
    reporters
from buildbot.process.properties import Interpolate
from os import environ
import json

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

c['buildbotNetUsageData'] = None

# {{{ environment variables
# configuration defaults are for local development.
git_url = environ.get(
    'BUILDBOT_GIT_REPOSITORY', 'git://github.com/buildbot/hello-world.git')
buildbot_url = environ.get(
    'BUILDBOT_URL', 'localhost:8010')
buildbot_db = environ.get(
    'BUILDBOT_DB_URL', 'sqlite:///state.sqlite')
aghost_cred = environ.get('BUILDBOT_AGHOST_CRED')
shardy_cred = environ.get('BUILDBOT_SHARDY_CRED')

github_oauth_id = environ.get('BUILDBOT_OAUTH_ID')
github_oauth_secret = environ.get('BUILDBOT_OAUTH_SECRET')

github_api_token = environ.get('BUILDBOT_GITHUB_API_TOKEN')
github_webhook_secret = environ.get('BUILDBOT_GITHUB_WEBHOOK_SECRET')

webhook_mode = github_api_token is not None \
    and github_webhook_secret is not None

# }}}

# {{{ workers

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
with open('/var/lib/buildbot/workers/workers.json') as file_handle:
    worker_config = json.load(file_handle)

c['workers'] = [
    worker.Worker(item['name'], item['pass'])
    for item in worker_config
]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that
# workers could connect to your master with this protocol. 'port' must match
# the value configured into the workers (with their --master option)
c['protocols'] = {'pb': {'port': 9989}}

# }}}

# {{{ change sources

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a
# python hello-world project.

c['change_source'] = []
if not webhook_mode:
    print('Webhook variables not specified, falling back to gitpoller')
    c['change_source'].append(
        changes.GitPoller(
            git_url, workdir='gitpoller-workdir', branch='devel',
            pollinterval=300))


# }}}

# {{{ schedulers

# Configure the Schedulers, which decide how to react to incoming changes.  In
# this case, just kick off a 'runtests' build

pr_filter = util.ChangeFilter(
    filter_fn=lambda change: change.properties['event'] == 'pull_request')

c['schedulers'] = [
    schedulers.AnyBranchScheduler(
        name="all", change_filter=pr_filter,
        builderNames=['runtests']),

    schedulers.ForceScheduler(name="force", builderNames=["runtests"])
]

# }}}

# {{{ builders

# The 'builders' list defines the Builders, which tell Buildbot how to perform
# a build:
# what steps, and which workers can execute them.  Note that any particular
# build will only take place on one worker.

factory = util.BuildFactory()
# check out the source
factory.addStep(steps.GitHub(repourl=git_url, mode='incremental'))

factory.addStep(
    steps.ShellCommand(command=['/buildbot/test.py']))

# bring up all of our services
# run the tests (note that this will require that 'trial' is installed)

workernames = [item['name'] for item in worker_config]

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(
        name="runtests", workernames=workernames, factory=factory))

# }}}

# {{{ buildbot services

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.


c['services'] = []
if github_api_token is not None:
    context = Interpolate("buildbot/%(prop:buildername)s")
    c['services'].append(
        reporters.GitHubStatusPush(
            token=github_api_token,
            context=context,
            startDescription='Build started.',
            endDescription='Build done.'))

# }}}

# {{{ project identity

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = 'stockpiler buildbot'
c['titleURL'] = 'https://github.com/AGhost-7/stockpiler'

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = buildbot_url

auth_config = util.UserPasswordAuth({
    'AGhost-7': aghost_cred,
    'hardy613': shardy_cred
})

if github_oauth_id is not None and github_oauth_secret is not None:
    print('OAuth configuration detected, enabling Github-based logins')
    auth_config = util.GitHubAuth(github_oauth_id, github_oauth_secret)

authz_config = util.Authz(
    roleMatchers=[
        util.RolesFromUsername(
            roles=['admin'], usernames=['AGhost-7', 'shardy613'])
    ],
    allowRules=[
        util.AnyEndpointMatcher(role='admin', defaultDeny=True)
    ])

plugins_config = dict(waterfall_view={}, console_view={}, grid_view={})


change_hook_dialects = {}

if webhook_mode:
    change_hook_dialects['github'] = {
        'secret': github_webhook_secret,
        'strict': True,
        'token': github_api_token
    }

c['www'] = {
    'port': 8010,
    'auth': auth_config,
    'authz': authz_config,
    'plugins': plugins_config,
    'change_hook_dialects': change_hook_dialects
}

# }}}

# {{{ db url

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can
    # leave this at its default for all but the largest installations.
    'db_url': buildbot_db
}

# }}}
